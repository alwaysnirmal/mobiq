{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2020-07-19T13:47:16.357Z",
    "end": "2020-07-19T13:47:17.875Z",
    "duration": 1518,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "173bd6c2-6e1d-456c-8588-377627731883",
      "title": "",
      "fullFile": "cypress/integration/comments.js",
      "file": "cypress/integration/comments.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8b1b1df4-1a06-444a-bdf2-ecf362b8a640",
          "title": "API Tests for Checking Format of Email in comments of Posts by Particular UserID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get User details",
              "fullTitle": "API Tests for Checking Format of Email in comments of Posts by Particular UserID Get User details",
              "timedOut": null,
              "duration": 212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//requesting user info of all avaiable users\ncy.request('/users').then(function (response) {\n  console.log(response);\n  expect(response.status).to.eq(200);\n  expect(response).to.have.property('duration').and.be.a('number');\n  expect(response.headers).to.have.property('content-type').to.contain('application/json; charset=utf-8');\n  expect(response.body, 'Number of Users are 10').to.have.length(10); //Storing Data in User file to be used afterwards\n  cy.writeFile('cypress/fixtures/userDetails.json', response.body);\n}); //function to search Username and retreive UserID\ncy.findUser('Delphine').then(function (userId) {\n  cy.wrap(userId).as('userId');\n});",
              "err": {},
              "uuid": "38476815-7940-4c37-9953-6ec7a04f8015",
              "parentUUID": "8b1b1df4-1a06-444a-bdf2-ecf362b8a640",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get All posts of particular userid",
              "fullTitle": "API Tests for Checking Format of Email in comments of Posts by Particular UserID Get All posts of particular userid",
              "timedOut": null,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// API request for retriving posts related to user derived in previous test\ncy.request({\n  url: '/posts',\n  qs: {\n    userId: this.userId\n  }\n}).then(function (response) {\n  console.log(response);\n  expect(response.status).to.eq(200);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration'); //Asserting that Number of Posts by particular user is 10\n  expect(response.body).to.have.length(10); //storing the response in fixture file to be used in other parts of tests\n  cy.writeFile('cypress/fixtures/posts.json', response.body);\n});",
              "err": {},
              "uuid": "fd551de9-dc78-4ffb-9e15-209e002f0f7d",
              "parentUUID": "8b1b1df4-1a06-444a-bdf2-ecf362b8a640",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get comments from each post and Validate Email Address",
              "fullTitle": "API Tests for Checking Format of Email in comments of Posts by Particular UserID Get comments from each post and Validate Email Address",
              "timedOut": null,
              "duration": 1058,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//retriving the fixture file stored in previous test blocks\ncy.fixture('posts').then(function (posts) {\n  cy.log(posts);\n  var _iterator = _createForOfIteratorHelper(posts),\n      _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var i = _step.value;\n      cy.request('/comments?postId=' + i.id).then(function (commentResponse) {\n        //Assering Number of Comments are 5\n        expect(commentResponse.body, 'Comments count per post is 5').to.have.length(5);\n        var commentsCount = Object.keys(commentResponse.body).length;\n        for (var x = 0; x < commentsCount; x++) {\n          expect(commentResponse.body[x]).to.have.property('postId').and.is.a('number');\n          expect(commentResponse.body[x]).to.have.property('id').and.is.a('number');\n          expect(commentResponse.body[x]).to.have.property('name').and.is.a('string');\n          expect(commentResponse.body[x]).to.have.property('email').and.is.a('string');\n          expect(commentResponse.body[x]).to.have.property('body').and.is.a('string');\n          var email = commentResponse.body[x].email; //Validating Email Format \n          cy.validateEmail(email).then(function (emailValidationResponse) {\n            expect(emailValidationResponse, 'Email is of Correct Format').to.be[\"true\"];\n          });\n        }\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n});",
              "err": {},
              "uuid": "bf41ee97-ef13-4cb7-b7ad-2aa6a1230804",
              "parentUUID": "8b1b1df4-1a06-444a-bdf2-ecf362b8a640",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "38476815-7940-4c37-9953-6ec7a04f8015",
            "fd551de9-dc78-4ffb-9e15-209e002f0f7d",
            "bf41ee97-ef13-4cb7-b7ad-2aa6a1230804"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1334,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d120839c-9de9-4606-ba10-2dad4b7bca53",
          "title": "Negative Test Scenario's / Inavlaid query parameters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate `response when Invalid Post ID is provided",
              "fullTitle": "Negative Test Scenario's / Inavlaid query parameters Validate `response when Invalid Post ID is provided",
              "timedOut": null,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//PostID 101 does not exist , Empty array should be retrieved \ncy.request('/comments?postId=101').then(function (response) {\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n  expect(response.body, 'Empty Array is returned').to.have.length(0);\n});",
              "err": {},
              "uuid": "366b07db-b802-4a17-a8ed-f124c9b5c876",
              "parentUUID": "d120839c-9de9-4606-ba10-2dad4b7bca53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate Response When Invalid User Id is provided retrieving the Posts based on UserID",
              "fullTitle": "Negative Test Scenario's / Inavlaid query parameters Validate Response When Invalid User Id is provided retrieving the Posts based on UserID",
              "timedOut": null,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//User ID 1001 does not exist - Empty array should be returned\ncy.request('/posts?userId=1001').then(function (response) {\n  expect(response.body, 'Empty Array is returned').to.have.length(0);\n});",
              "err": {},
              "uuid": "69d2b9cf-cc73-4d4e-8e08-aa7b45c24a66",
              "parentUUID": "d120839c-9de9-4606-ba10-2dad4b7bca53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "366b07db-b802-4a17-a8ed-f124c9b5c876",
            "69d2b9cf-cc73-4d4e-8e08-aa7b45c24a66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 147,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "charts": true
      },
      "version": "5.1.0"
    }
  }
}